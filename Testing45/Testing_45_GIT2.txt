22/05/2023 --- Code Movement:-

Git Commands with detailed process:
Steps:

1. we have created a git repository..on github.
(remote location...)


2. clone/downlaod the repository.
syntax - git clone <url of repo>
at this point--> repo is in local system.

3. open the repository(.git) in any IDE(pycharm/intelliJ/vs
 code)  - a project with files.
1. pycharm
2. IntelliJ
3. VS Code.


4. in pycharm, create a new file(example.py), 
write addition of 2 numbers program.


(After successful logic implementation)
5. git add Addition.py - adding in staging area.
staging area --> temporary source code storage area.

  git add . --> to add all the files in staging Area.


6. git commit -m "This is addition program" - to save
on local system.
-m for passing a commit message..


7. git push origin main<branch_name> - to push addition 
file(commit) to remote location.
origin means - remote location

finally, your code is pushed to remote github.
just refresh the github page and see the updated code.

git status --- to check on which branch you are..


Terminology:
1. working directory - your cloned project or git repo.
2. Staging area - Temporary storage area.
3. commit  - to save the code in local repository.
4. git push - to push your code to remote location...
5. origin - means remote (github main branch)

------------------------------------------------------


Git Commands:

shared repository---Testing_45
10 user active---
10 team members..
code add, commit, push

local --> remote

they have to pull code the code....from remote


23/05/2023--------------------------
-----Git Commands with explanation-----

1. git config --global user.name <username> -- 
to authenticate your username. used only for one time.

2. git config --global user.email <email_id>- 
to authenticate your email address with GITHUB account..

3. git status--- to check the status of your branch
1. on which branch you are..
2. is there any code to add in staging area.

4. git add <filename> -- to add file in staging area.
just temporary storage area for commint the code.

5. git commit -m "message" -- to save the changes on local.

6. git push - to push your changes/code to remote repo.

7. git pull - to pull the remote chnages/code to local.

8. git diff - to verify the difference...
before commeting the code...this will show you the diff.


9. git log -- will give you the recent commit in history format.
history check krna

branching mechanism in Git:
10. git branch creation
ex - git branch aws_8_9
git branch  - to verify the branches 


11. git checkout - moving from one branch to another.
checkout your branch from 1 branch to another.

Master branch- Production environment....
Develop branch- Dev environment...  rough/demo
it will be merged in develop first...

-----------------------------------------------
06/04/2023 -- Git6_t42_43

8. git diff - shows the difference which are not yet 
staged.

9. git log - to check the recent commit history...


10. git branch - to list all the branches in local.


11. git branch branch1 - to create new branch in the 
same repository.

12. git checkout <branch-name> - to move to new branch.

13. git status - to verify
14. git branch - to verify


sample example:-
4 colleague --
ajit, sanket, pratik and kiran developer
aws is your Repository.
grant you the permission by admin

1. ajit1 is the branch --- desinged 1 module -- 70-80 lines code
branch push to remote....ajit1 branch merge in Develop branch
develop--> dev environment [merge request or pull request....]

2. snaket1 is the new branch--designed 1 module-100 line code
branch push to remote...sanket1 branch has to merge in develop
dev environment...[merge request or pull request]

3.pratik1 is the new branch--designed 2 module-200 line code
branch push to remote...pratik1 branch has to merge in develop
dev environment...[merge request or pull request]

4. do the same...

develop branch pe total 4 modules....4 commits

krutika ye sab updated changes pull unke local pe?
--> repository clone/download
git pull <branch_name>

ajit 1 module push kiya.....

krutika has to pull....
git pull <branch_name>
git pull - to fetch the updated code.. 
 
2nd module prepare...
she has push....
other has to pulll.... 


pick the develop branch,
merge in Master branch [pull request or merge request]
reviewed ----by Team Leader
Master branch is the [Production Environment]
Master branch functionality to user milta hai....
VM -- server --up 24 by 7

         
-----------------------------------------------------
07/04/2023 --- Git7aws_8_9

Create repo in github and push the new code.

branching mechanism....
steps:
1. create the reop in github
2. clone/download it to local
3. open repository as project in pycharm
4. add any python file.
5. write one simple program in newly created file.
6. git add filename
7. git commit -m "pass here msg"
8. git push origin <branch_name>


Git pull....
steps:
1. we need 2 students
2. one has to share his repository to another student.
3. other student can clone his repository to local.
4. open in pycharm
5. git status
6. git log - to see recent commits
7. git pull
8. this is how the git pull works in real world.


-------------------------------------------------------
06/03/2023 --- Git8_t42_43

git pull - to pull the updated changes/code from remote
github to your local.



Git pull....
steps:
1. we need 2 students
2. one has to share his repository to another student.
3. other student can clone his repository to local.
4. open in pycharm
5. git status
6. git log - to see recent commits
7. git pull - to pull
8. this is how the git pull works in real world.
-------------------------------------------------------


25/05/2023:

Pull Request:

1. create branch in github.

2. clone in local.

3. create "test" branch in new repo. (feature branch)

4. checkout to test....

5. add addition.py n code in test branch
 
6. git add .

7. git commit -m "in test branch"
 
8. git push origin test 

9. test branch n code is availbale in github.

10. new you have to open a pull request
Note:- "develop" n "master" branch are already created
in your orgrnization repo.


test branch has 2 modules....
pull request - pick test branch code and merge in 
Develop branch.
 
open a pull request:
from test ---> DEVELOP

add TL as reviewer...he may take 4H to 1D to review
your source code (2 modules).
approve ke diya
code is merged in Develop/Dev Branch.(DEV Environment.)

DEV environment = "rough/demo/practise/
working or not working"

As soon as your code will megerd in DEV env.
tester can begin with DEV testing...(2H-4H)
results are OK.


second pull request:
pick develop branch and merge in Master.
develop ---> Master merge. (PROD environment.)
master/production/live environment

Master branch is hosted in server.
www.amazon.in/india --- 2 min -- 2Cr





