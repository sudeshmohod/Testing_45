12/06/2023 - Pandas --

Reading of excel sheet/file
#you need to store excel file on local

import pandas as pd

df = pd.read_excel('sample.xlsx')

print(df)


##Read dictionary as json:
# you need your file as json.
import pandas as pd

data = {
  "calories": [420, 380, 390],
  "duration": [50, 40, 45]
}

df = pd.DataFrame(data)

print(df)

example2:
import pandas as pd

df = pd.read_json('json_filename')

print(df)


Analysing the Data:
Pandas Basic methods:
1. head():- this method returns first few records.

2. tail():- this method returns last few records.

3. info():- Gives you more information about dataframe.

4. describe():- describe will give you 5 number summary variables.

pip install openpyxl


13/06/2023:
####Data cleaning:

Data cleaning means fixing/removing bad data in 
your data set.

isna() - to check how many Nan values are present. 
Nan value- empty value/blank value from the dataset.

dropna() method will remove the all 
NaN values from the dataset.

Note:- Empty cells can potentially give you a 
wrong result when you analyze data.

isna() - to check how many null/blank/empty
values are present in dataset.

example: import pandas as pd

df = pd.read_csv('data.csv')

df.isna().sum()

#new_df = df.dropna()

new_df.head()

new_df.head(30)


13/06/2023 -- Pandas
## Fill the missing values....

we can replace the missing or NaN values.

The fillna() method allows us to replace 
empty cells with a value:

code to fill the missing values
#this will reflect in whole dataset.....
if you want you can fill the value in 
specific column as well.

#####import pandas as pd

df = pd.read_csv('data.csv')

df.fillna(130, inplace = True)

df.head(40)



####More specifically you can fill the
same column which has the missing values.

to find out null values: df.isna().sum() 

import pandas as pd

df = pd.read_csv('data.csv')

df["Calories"].fillna(130, inplace = True)



#### Most important way to fill the values.#####

import pandas as pd

df = pd.read_csv('data.csv')

x = df["Calories"].mean()
#we are filling with mean values in only 
#calories column...
#this is the most used way...
df["Calories"].fillna(x, inplace = True)

Question to check for testing:
1. is he reading the file correctly.
2. is he doing something with NaN values.
3. is he filling the NaN values? If yes ?
4. how he is filling...?







------------------------------------------------------
14/06/2023 - Matplotlib library...
Data Visualization - Plotting the Graphs/dashboards..
just to understand the data or complex data......

3. Matplotlib library:

Matplotlib is an amazing visualization library 
in Python for 2D plots of arrays. 

It comes with a wide variety of plots.
plots/visualizations helps us to understand,
trends, patterns, insights(ways) from the data..

first install it:
command - pip install matplotlib

verify the version
import matplotlib.pyplot as plt
print(plt.__version__)

first example:
##########Basic
import matplotlib.pyplot as plt
import numpy as np

xpoints = np.array([0, 6])
ypoints = np.array([0, 250])

plt.plot(xpoints, ypoints)
plt.show()

3 basic types of plot/graph visualization.
1. histogram
2. Scatter plot
3. pie chart

1. histogram:

# importing matplotlib module
from matplotlib import pyplot as plt
 
# Y-axis values
y = [10, 5, 8, 4, 2]
 
# Function to plot histogram
plt.hist(y)
 
# Function to show the plot
plt.show()


2. Scatter plot 

# importing matplotlib module
from matplotlib import pyplot as plt
 
# x-axis values
x = [5, 2, 9, 4, 7]
 
# Y-axis values
y = [10, 5, 8, 4, 2]
 
# Function to plot scatter
plt.scatter(x, y)
 
# function to show the plot
plt.show()

3. bar plot

# importing matplotlib module
from matplotlib import pyplot as plt
 
# x-axis values
x = [5, 2, 9, 4, 7]
 
# Y-axis values
y = [10, 5, 8, 4, 2]
 
# Function to plot the bar
plt.bar(x,y)
 
# function to show the plot
plt.show()

4. Pie chart:
Again this is used for data visualization...


A simple pie chart:

import matplotlib.pyplot as plt
import numpy as np

y = np.array([35, 25, 25, 15])

plt.pie(y)
plt.show() 

example2: 
import matplotlib.pyplot as plt
import numpy as np
x = np.array([20, 20, 20, 20, 20])
plt.pie(x) #organization profit
plt.show() 


read pandas column in matplotlib
import pandas as pd

df = pd.read_csv('data.csv')
df.info()
x = df['Calories']
y = df['Duration']
from matplotlib import pyplot as plt
plt.scatter(x,y)
plt.show()




for creating the graphs python has 3 imp library:
1. matplotlib (2D plots)
2. seaborn (attractive graphs..)
3. bokeh (for complex graphs..)





----------------------------------------------
15/06/2023---- Linear Regression Algorithm:

Linear - all are in one line...
regression - continuous value...
example- salary, house price, stock price etc.

classification:- Gender can b classified in 2 types:
to predict categorical....
Examples:-

1.Male 2. Female
2. veg, nonveg, vegan
3. *, **, ***, ****, *****star...


Steps for building ML Model:
1. fetch the data from different sources - read_csv,
2. prepare or analyse, clean, manipulate - panda library..
3. data visualization or graphs or plot - matplotlib
4. use M/L algorithm to build model - sci-kit-learn
5. verify the output / check accurancy
   if it satisfy than OK.
   if not then improve the ML algorithm/logic
   so that the accurancy will be improved.


The term regression is used when you try to 
find the relationship between variables.

input variable(x variable)(your training data) 
& output variable(y-variable)(predictions)
accuracy--->

for ex- 100values --> 80/20 ya 70/30 training/test data

good practise -- 80 / 20

In Machine Learning, and in statistical modeling, 
that relationship is used to predict the outcome 
of future events (actual prediction in future).

Linear regression uses the relationship 
between the data-points to draw a straight 
line through all them.

This line can be used to predict future values.

straight line equations:
y = mx + c

intercept- It is the point where the slope
intersects the Y-axis. indicated in above
equation c.


Coefficient- it represents changes in a 
response variables(output variable (y)).


1st example:

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


data = pd.read_csv('Salary_Data.csv') #data fetching...

x = data['YearsExperience'] # input variable/training data
y = data['Salary'] # output variable / predictions

data.head()

data.info()

plt.scatter(x, y) # scatter plot to display the values..
plt.show() #data visualization..


def linear_regression(x, y):     
    N = len(x)
    x_mean = x.mean()
    y_mean = y.mean()
    
    B1_num = ((x - x_mean) * (y - y_mean)).sum()
    B1_den = ((x - x_mean)**2).sum()
    B1 = B1_num / B1_den
    
    B0 = y_mean - (B1*x_mean)
    
    reg_line = 'y = {} + {}β'.format(B0, round(B1, 3))
    
    return (B0, B1, reg_line)




N = len(x)
x_mean = x.mean()
y_mean = y.mean()

B1_num = ((x - x_mean) * (y - y_mean)).sum()
B1_den = ((x - x_mean)**2).sum()
B1 = B1_num / B1_den

def corr_coef(x, y):
    N = len(x)
    
    num = (N * (x*y).sum()) - (x.sum() * y.sum())
    den = np.sqrt((N * (x**2).sum() - x.sum()**2) * (N * (y**2).sum() - y.sum()**2))
    R = num / den
    return R

B0, B1, reg_line = linear_regression(x, y) #algorithm adding here...
print('Regression Line: ', reg_line)
R = corr_coef(x, y)
print('Correlation Coef.: ', R)
print('"Goodness of Fit": ', R**2)
# Output:
# Regression Line:  y = 25792.20019866869 + 9449.962β
# Correlation Coef.:  0.97824161848876
# "Goodness of Fit":  0.9569566641435087

plt.figure(figsize=(12,5))
plt.scatter(x, y, s=300, linewidths=1, edgecolor='black')
text = '''X Mean: {} Years
Y Mean: ${}
R: {}
R^2: {}
y = {} + {}X'''.format(round(x.mean(), 2), 
                       round(y.mean(), 2), 
                       round(R, 4), 
                       round(R**2, 4),
                       round(B0, 3),
                       round(B1, 3))
plt.text(x=1, y=100000, s=text, fontsize=12, bbox={'facecolor': 'grey', 'alpha': 0.2, 'pad': 10})
plt.title('How Experience Affects Salary')
plt.xlabel('Years of Experience', fontsize=15)
plt.ylabel('Salary', fontsize=15)
plt.plot(x, B0 + B1*x, c = 'r', linewidth=5, alpha=.5, solid_capstyle='round')
plt.scatter(x=x.mean(), y=y.mean(), marker='*', s=10**2.5, c='r') # average point


--------------------------------------------------------
16/06/2023 -- Logistics Regression Algorithm:

Main line:----It aims to solve classification problems.

what is classification problems-->
which has more than one outcome(result)
ex - (M,F), (0,1), (Y,N) etc..
ex - 
2 variable classification - yes/no - binary classification.
3 variable classification - veg - nonve - vegan - multi-variable.
5 variable classification - 5 star movie rating..

It is a Machine Learning classification algorithm 
that is used to predict the probability of a 
categorical dependent variable(output variable). 

In logistic regression, the dependent(output) 
variable is a binary variable 
that contains data coded as 1 (yes, success, etc.) 
or 0 (no, failure, etc.).

suppose ---100 records
75 used for training.... 70-80% 
25 used for testing..... 30-20%


sample example:
problem statement:-

We are using this dataset for predicting 

whether a employee will purchase the company’s newly 
launched product or not ?
employee --> purchase or not purchased ?

standard scalar:-
Important to perform feature scaling here 
because Age and Estimated Salary values lie in 
different ranges. If we don’t scale the features then the Estimated Salary
    feature will dominate the Age feature when the model finds the 
    nearest neighbor to a data point in the data space. 

there value must b = -1 to 1
negative 1 to positive 1 --> -1 to 0 & o to +1


Confusion Matrix Explanation:
True negatives: correctly predicted negatives (zeros)
True positives: correctly predicted positives (ones)
False negatives: incorrectly predicted negatives (zeros)
False positives: incorrectly predicted positives (ones)

Practise code:-

Problem Statement :- predicting whether a user will purchase 
    the company’s newly launched product or not.

# user/customer
# company / organization
# product launch
# purchase or not?
#---> its a classification problem

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_excel("LogisticsAlgorithm.xlsx")

df.head()

newdf = df #Doing the Backup

newdf.head()

newdf.info()

newdf.describe()

# input
x = newdf.iloc[:, [2, 3]].values
#we are considering only Age and Expected salary
# output
y = newdf.iloc[:, 4].values
#Purchased column is out output...

from sklearn.model_selection import train_test_split

xtrain, xtest, ytrain, ytest = train_test_split(
	x, y, test_size=0.25, random_state=0)
#Splitting The Dataset: Train and Test dataset
#Traing data is = 75%
#Testing data is = 25%

from sklearn.preprocessing import StandardScaler

sc_x = StandardScaler()
xtrain = sc_x.fit_transform(xtrain)
xtest = sc_x.transform(xtest)

print (xtrain[0:10, :])
# 0 & 1

 
from sklearn.linear_model import LogisticRegression

classifier = LogisticRegression(random_state = 0)
classifier.fit(xtrain, ytrain) # 75%

y_pred = classifier.predict(xtest)


print(y_pred)

from sklearn.metrics import confusion_matrix

cm = confusion_matrix(ytest, y_pred)
print ("Confusion Matrix : \n", cm)


#True Positive + True Negative = 6 + 0 ---> cross diagonal values
#False Positive + False Negative = 1 + 0 ---> cross diagonal values
#Performance measure – Accuracy 

from sklearn.metrics import accuracy_score

print ("Accuracy : ", accuracy_score(ytest, y_pred))


Steps :
1. read a dataset. later this will change with origional data.
2. understading/clean/manipulate of the dataset.
3. seperate input & output columns to model.
4. use train_test_split method.
5. define/use algorithm.
6. fit() method on (x-train n y-train) - just for training. 
7. use predict() method - for prediction...
8. model accurancy metrics checking:
    8.1 - confusion metrics
    8.2 - accuracy score
9. improve the model accurancy...


--------------------------------------------------
17/06/2023 - ML Algorithm

Tasks are two :
1. prediction
2. classification

1. Linear Regression
2. Logistics Regression


3. Support Vector Machine:
is a classification: making it easy to classify the data.

4. Naive Bayes:
is a classification algorithm.


5. Decision Tree - 
Is a ML ALgorithm..it is supervised ML Algo used for 
classification problems...

6. K-means clustring- 
is a unsupervised algorithm, solves clustering problems.
it forms a group which looks similar.

7. K-Nearest Neighbour
can do both- classification and regression.
widely used for classification.

8. Random Forest....




Why we use algorithm?
in which problem statement it performs better?
what it is exactly?

----------------END---------------------------



